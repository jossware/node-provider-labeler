name: ci
on:
  push:
    branches:
      - "main"
      - "gha"
    tags:
      - "v*"
      - "r*"
env:
  REGISTRY: ghcr.io
  REGISTRY_IMAGE: ghcr.io/${{ github.repository }}

jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write
  #     attestations: write
  #     id-token: write
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       platform:
  #         - linux/amd64
  #         # - linux/arm64
  #   steps:
  #     - name: Prepare
  #       run: |
  #         platform=${{ matrix.platform }}
  #         echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ${{ env.REGISTRY_IMAGE }}

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to the Container registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Build and push by digest
  #       id: build
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         platforms: ${{ matrix.platform }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

  #     - name: Export digest
  #       run: |
  #         mkdir -p /tmp/digests
  #         digest="${{ steps.build.outputs.digest }}"
  #         touch "/tmp/digests/${digest#sha256:}"

  #     - name: Upload digest
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: digests-${{ env.PLATFORM_PAIR }}
  #         path: /tmp/digests/*
  #         if-no-files-found: error
  #         retention-days: 1

  # merge:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write
  #     packages: write
  #     attestations: write
  #     id-token: write
  #   needs:
  #     - build
  #   steps:
  #     - name: Download digests
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: /tmp/digests
  #         pattern: digests-*
  #         merge-multiple: true

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ${{ env.REGISTRY_IMAGE }}

  #     - name: Log in to the Container registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Create manifest list and push
  #       working-directory: /tmp/digests
  #       run: |
  #         docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
  #           $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

  #     - name: Inspect image
  #       run: |
  #         docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}

  #     - name: Create GitHub Release
  #       if: startsWith(github.ref, 'refs/tags/')
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ github.ref }}
  #         release_name: Release ${{ github.ref_name }}
  #         draft: false
  #         prerelease: false

  release:
    name: Release - ${{ matrix.platform.release_for }}
    strategy:
      matrix:
        platform:
          - release_for: x86_64-linux
            os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            bin: node-provider-labeler
            name: node-provider-labeler-linux-x86_64.tar.gz
            command: both

          - release_for: aarch64-linux
            os: ubuntu-20.04
            target: aarch64-unknown-linux-gnu
            bin: node-provider-labeler
            name: node-provider-labeler-linux-aarch64.tar.gz
            command: both

    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: ${{ matrix.platform.command }}
          target: ${{ matrix.platform.target }}
          args: "--locked --release"
          strip: true
      - name: inspect target
        run: ls -al target
      - name: inspect release
        run: ls -al target/release

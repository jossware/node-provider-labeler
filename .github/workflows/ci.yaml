name: ci
on:
  push:
    branches:
      - "main"
      - "gha"
    tags:
      - "v*"
env:
  REGISTRY: ghcr.io
  REGISTRY_IMAGE: ghcr.io/${{ github.repository }}
  REGISTRY_CHART: ghcr.io/${{ github.repository_owner }}/charts

jobs:
  build:
    name: Build - ${{ matrix.platform.build_for }}
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    strategy:
      matrix:
        platform:
          - build_for: linux/amd64
            os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            bin: node-provider-labeler
            name: node-provider-labeler-linux-x86_64
            command: both

          - build_for: linux/arm64
            os: ubuntu-20.04
            target: aarch64-unknown-linux-gnu
            bin: node-provider-labeler
            name: node-provider-labeler-linux-aarch64
            command: both

    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform.build_for }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: ${{ matrix.platform.command }}
          target: ${{ matrix.platform.target }}
          args: "--locked --release"
          strip: true

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.name }}
          path: target/${{ matrix.platform.target }}/release/node-provider-labeler
          if-no-files-found: error
          retention-days: 1

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform.build_for }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            target=${{ matrix.platform.target }}/release
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1
  merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          path: bins
          pattern: node-provider-labeler-*
          merge-multiple: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}

      - name: Rename binaries
        run: |
          mv bins/node-provider-labeler-linux-x86_64/node-provider-labeler node-provider-labeler-linux-x86_64
          mv bins/node-provider-labeler-linux-aarch64/node-provider-labeler node-provider-labeler-linux-aarch64

      - name: Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          name: Release ${{ github.ref_name }}
          fail_on_unmatched_files: true
          files: |
            node-provider-labeler-linux-x86_64
            node-provider-labeler-linux-aarch64

  chart:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # important parameter

      - name: Configure git author
        run: |
          git config user.email "runner-$(hostname)@github.com"
          git config user.name "Github Actions"

      - name: Run chart-releaser
        id: chart_releaser
        uses: acuD1/chart-releaser-action@main
        with:
          skip_upload: true
          mark_as_latest: false
        env:
          CR_RELEASE_NAME_TEMPLATE: "chart-{{ .Version }}"
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        if: steps.chart_releaser.outputs.changed_charts != ''
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push chart OCI artifact
        if: steps.chart_releaser.outputs.changed_charts != ''
        run: |
          for pkg in .cr-release-packages/*; do
            if [ -z "${pkg:-}" ]; then
              break
            fi
            helm push "${pkg}" oci://${{ env.REGISTRY_CHART }}
          done
